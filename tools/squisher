#!/bin/sh
#
# Squish a devnull otapackage for distribution
# original script by cyanogen
#

TARGET_BUILD_VARIANT=eng

OUT_TARGET_HOST=`uname -a | grep Darwin`
if [ -z "$OUT_TARGET_HOST" ]
then
   OUT_TARGET_HOST=linux-x86
   MD5=md5sum
   XARGS="xargs --max-args=1 --max-procs `grep 'processor' /proc/cpuinfo|wc -l`"
   SED=sed
else
   OUT_TARGET_HOST=darwin-x86
   MD5=md5
   XARGS="xargs -n 1 -P `sysctl hw.ncpu | awk '{print $2}'`"
   SED=gsed
fi

if [ -z "$OUT" -o ! -d "$OUT" ]; then
	echo "ERROR: $0 only works with a full build environment. $OUT should exist."
	exit 1
fi

OTAPACKAGE=$OUT/$TARGET_PRODUCT-ota-$TARGET_BUILD_VARIANT.$LOGNAME.zip
if [ ! -f "$OTAPACKAGE" ]; then
	echo "$OTAPACKAGE doesn't exist!";
	exit 1
fi

OPTICHARGER=$ANDROID_BUILD_TOP/vendor/devnull/tools/opticharger
QUIET=-q
DELETE_BINS="applypatch applypatch_static check_prereq recovery updater"

DELETE_ENG="
system/app/Development.apk
system/app/Development.odex
system/app/SpareParts.apk
system/app/SpareParts.odex
system/app/Term.apk
system/app/Term.odex
system/bin/audioloop
system/bin/badblocks
system/bin/dump_image
system/bin/e2fsck
system/bin/e2label
system/bin/erase_image
system/bin/flash_image
system/bin/gdbjithelper
system/bin/gdbserver
system/bin/InputChannel_test
system/bin/InputDispatcher_test
system/bin/InputPublisherAndConsumer_test
system/bin/InputReader_test
system/bin/keystore_cli
system/bin/Looper_test
system/bin/mke2fs
system/bin/ObbFile_test
system/bin/qemud
system/bin/qemu-props
system/bin/radiooptions
system/bin/record
system/bin/resize2fs
system/bin/rtp_test
system/bin/showlease
system/bin/skia_test
system/bin/stagefright
system/bin/String8_test
system/bin/testid3
system/bin/tune2fs
system/bin/unyaffs
system/bin/wpa_cli
system/etc/mke2fs.conf
system/lib/hw/gps.goldfish.so
system/lib/hw/sensors.goldfish.so
system/lib/invoke_mock_media_player.so
system/lib/libc_malloc_debug_leak.so
system/lib/libc_malloc_debug_qemu.so
system/lib/libext2_blkid.so
system/lib/libext2_com_err.so
system/lib/libext2_e2p.so
system/lib/libext2fs.so
system/lib/libext2_profile.so
system/lib/libext2_uuid.so
system/lib/libpagemap.so
system/lib/libterm.so
system/xbin/add-property-tag
system/xbin/agent
system/xbin/attest
system/xbin/avinfo
system/xbin/avtest
system/xbin/bdaddr
system/xbin/btool
system/xbin/bttest
system/xbin/check-lost+found
system/xbin/cpueater
system/xbin/crasher
system/xbin/daemonize
system/xbin/dbus-monitor
system/xbin/dbus-send
system/xbin/dhdutil
system/xbin/directiotest
system/xbin/hciconfig
system/xbin/hcidump
system/xbin/hcitool
system/xbin/hstest
system/xbin/l2ping
system/xbin/l2test
system/xbin/latencytop
system/xbin/librank
system/xbin/lmptest
system/xbin/nc
system/xbin/netperf
system/xbin/netserver
system/xbin/opcontrol
system/xbin/oprofiled
system/xbin/procmem
system/xbin/procrank
system/xbin/rawbu
system/xbin/rctest
system/xbin/rfcomm
system/xbin/scotest
system/xbin/scp
system/xbin/sdptest
system/xbin/showmap
system/xbin/showslab
system/xbin/sqlite3
system/xbin/ssh
system/xbin/strace
system/xbin/tcpdump
system/xbin/timeinfo
system/xbin/vfp-crasher"

REPACK=$OUT/repack.d
printf "Sanitizing environment..."
rm -rf $REPACK
mkdir -p $REPACK
echo


# Unpack the otapackage and opticharge all apks
mkdir $REPACK/ota
(
cd $REPACK/ota
printf "Unpacking $OTAPACKAGE..."
unzip $QUIET $OTAPACKAGE
echo
cd $REPACK/ota/system/framework
$OPTICHARGER framework-res.apk
cd $REPACK/ota/system/app
find ./ -name \*.apk | $XARGS $OPTICHARGER
)


# Fix build.prop
$SED -i \
	-e '/ro\.kernel\.android\.checkjni/d' \
	-e '/ro\.build\.type/s/eng/user/' \
	$REPACK/ota/system/build.prop


# Delete unnecessary binaries
( cd $REPACK/ota/system/bin; echo $DELETE_BINS | xargs rm -f; )

# Delete eng files
( cd $REPACK/ota; echo $DELETE_ENG | xargs rm -f; )

# No need for recovery
rm -rf $REPACK/ota/recovery

# Strip modules
find `find $REPACK/ota/system -name "modules" -type d` -name "*.ko" -print0 | xargs -0 arm-eabi-strip --strip-unneeded

# Set date
DATE=`date +%d%m%y-%H%M`

# Determine what to name the new signed package
if [ ! -z "$OXYGEN_RELEASE" ]; then
	MODVERSION=`sed -n -e'/ro\.modversion/s/^.*Oxygen-//p' $REPACK/ota/system/build.prop`
	OUTFILE=$OUT/update-oxygen-$MODVERSION-signed.zip
else
	OUTFILE=$OUT/update-oxygen-test-$DATE-signed.zip
fi

# Pack it up and sign
printf "Zipping package..."
( cd $REPACK/ota; zip $QUIET -r $REPACK/update.zip . )
echo
printf "Signing package..."
SECURITYDIR=$ANDROID_BUILD_TOP/build/target/product/security
java -Xmx512m \
	-jar $ANDROID_BUILD_TOP/out/host/$OUT_TARGET_HOST/framework/signapk.jar \
	-w $SECURITYDIR/testkey.x509.pem $SECURITYDIR/testkey.pk8 \
	$REPACK/update.zip $OUTFILE
echo
printf "Cleaning up..."
rm -rf $REPACK
echo

# Create a md5 checksum image of the repacked package
(
img=`basename $OUTFILE`
cd `dirname $OUTFILE`
$MD5 $img >$img.md5sum
echo
echo "Package complete: $OUTFILE"
cat $img.md5sum
echo
)

exit 0

